@page "/"
@using System.Text.Json
@using VariationPackCreator.Models
@using VariationPackCreator.Components
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<h3>Vehicle Variation Pack Creator</h3>

@if (ShowSetup)
{
    <SetupPanel OnPresetLoaded="LoadJson" OnFileUploaded="LoadJson" OnClose="() => ShowSetup = false" />
}
else
{
    <button @onclick="ConfirmStartFromScratch" style="margin-top: 20px;">Start from Scratch</button>
    <button @onclick="DownloadPack" style="margin-top: 20px;">Download my Pack</button>
    <div style="margin-top: 20px;" class="loaded-section">
        <h4>Loaded JSON data:</h4>
        <PackComponent Pack="@CurrentPack" />
    </div>
}

@code {
    private Pack CurrentPack { get; set; }
    private string LoadedJson = "";
    private bool ShowSetup = true;

    private async Task LoadJson(string json)
    {
        var options = new JsonSerializerOptions
        {
            Converters = { new ColorConverter() },
            PropertyNameCaseInsensitive = true
        };

        try
        {
            CurrentPack = JsonSerializer.Deserialize<Pack>(json, options);
            ShowSetup = false;
        }
        catch (Exception ex)
        {
            // Fehlerbehandlung
            Console.WriteLine($"Error deserializing JSON: {ex.Message}");
        }
    }

    private async Task ConfirmStartFromScratch()
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure? All data will be lost!");
        if (confirmed)
        {
            ShowSetup = true;
            LoadedJson = "";
        }
    }

    private async Task DownloadPack()
    {
        string json = JsonSerializer.Serialize(CurrentPack);
        await JSRuntime.InvokeVoidAsync("downloadJson", json, CurrentPack.Name + ".json");
    }
}