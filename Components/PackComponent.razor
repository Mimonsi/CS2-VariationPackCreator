@using VariationPackCreator.Models
@inject IJSRuntime JsRuntime
<h3>
    <input type="text" @bind="Pack.Name" />
</h3>

<div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
    @foreach (var prefabEntry in Pack.Entries)
    {
        <PrefabEntry Name="@prefabEntry.Key" Variations="@prefabEntry.Value" OnRemovePrefabClick="RemovePrefab"/>
    }

    <AddPrefabEntryComponent VanillaPack="@VanillaPack" Pack="@Pack" OnAddPrefabEntryClick="AddNewPrefab"/>
</div>

@code {
    [Parameter] public required Pack Pack { get; set; }
    [Parameter] public required Pack VanillaPack { get; set; }

    // Methode zum Hinzufügen eines neuen Prefabs
    private void AddNewPrefab(string name)
    {
        if (!string.IsNullOrEmpty(name) && !Pack.Entries.ContainsKey(name))
        {
            Pack.Entries[name] = new List<Variation>();
            if (VanillaPack.Entries.ContainsKey(name))
            {
                foreach (Variation variation in VanillaPack.Entries[name])
                {
                    Pack.Entries[name].Add(new Variation
                    {
                        Color1 = variation.Color1,
                        Color2 = variation.Color2,
                        Color3 = variation.Color3,
                        Probability = variation.Probability
                    });
                }
            }
        }
    }

    private async Task RemovePrefab(string name)
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure to remove this prefab?");
        if (confirmed)
        {
            Pack.Entries.Remove(name);
        }

    }
}
