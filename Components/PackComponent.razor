@using VariationPackCreator.Models
<h3>
    <input type="text" @bind="Pack.Name" />
</h3>

<div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
    @foreach (var prefabEntry in Pack.Entries)
    {
        <div class="col">
            <div class="accordion" id="accordion-@prefabEntry.Key">
                <div class="accordion-item">
                    <h2 class="accordion-header" id="heading-@prefabEntry.Key">
                        <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapse-@prefabEntry.Key" aria-expanded="true" aria-controls="collapse-@prefabEntry.Key">
                            <div class="prefab-image-container">
                                <img src="@GetThumbnail(prefabEntry.Key)" alt="@prefabEntry.Key" class="prefab-image-large" onerror="this.onerror=null;this.src='images/placeholder.jpg';" />
                            </div>
                            <h5 class="prefab-text">@prefabEntry.Key</h5>
                        </button>
                    </h2>
                    <div id="collapse-@prefabEntry.Key" class="accordion-collapse collapse" aria-labelledby="heading-@prefabEntry.Key" data-bs-parent="#accordion-@prefabEntry.Key">
                        <div class="accordion-body">
                            @foreach (var variation in prefabEntry.Value)
                            {
                                <VariationComponent Variation="@variation" />
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

    <div class="col">
        <div class="accordion" id="accordion-Add-Entry">
            <div class="accordion-item">
                <h2 class="accordion-header" id="heading-Add-Entry">
                    <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapse-Add-Entry" aria-expanded="true" aria-controls="collapse-Add-Entry">
                        <div class="prefab-image-container">
                            <img src="@GetSelectedPrefabImage()" alt="Add Entry" class="prefab-image-large" onerror="this.onerror=null;this.src='images/placeholder.jpg';"/>
                        </div>
                        <h5 class="prefab-text">Add Prefab</h5>
                    </button>
                </h2>
                <div id="collapse-Add-Entry" class="accordion-collapse collapse" aria-labelledby="heading-Add-Entry" data-bs-parent="#accordion-Add-Entry">
                    <div class="accordion-body">
                        <!-- Checkbox für benutzerdefinierten Namen -->
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="useCustomPrefabName" @onchange="OnCustomPrefabNameChange"/>
                            <label class="form-check-label" for="useCustomPrefabName">
                                Use Custom Prefab Name
                            </label>
                        </div>

                        <!-- Entweder Dropdown oder Textfeld basierend auf Checkbox -->
                        @if (_useCustomPrefabName)
                        {
                            <input type="text" class="form-control mt-2" @bind="_customPrefabName" placeholder="Enter custom prefab name" />
                        }
                        else
                        {
                            <select @bind="_selectedPrefabKey" class="form-select mt-2">
                                <option value="" disabled selected>Select prefab to add</option>
                                @foreach (var prefabKey in VanillaPack.Entries.Keys)
                                {
                                    if (!Pack.Entries.ContainsKey(prefabKey))
                                    {
                                        <option value="@prefabKey">@prefabKey</option>
                                    }
                                }
                            </select>
                        }

                        <button class="btn btn-primary mt-2" @onclick="AddNewPrefab" disabled="@(!IsAddButtonEnabled())">
                            Add
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public Pack Pack { get; set; }
    private string _selectedPrefabKey = string.Empty; // Dropdown value
    [Parameter] public Pack VanillaPack { get; set; }

    private bool _useCustomPrefabName = false; // Zustand der Checkbox
    private string _customPrefabName = string.Empty; // Benutzerdefinierter Name

    private Dictionary<string, bool> prefabVisibility = new Dictionary<string, bool>();

    // Methode zur Überprüfung, ob der benutzerdefinierte Name bereits existiert
    private bool IsCustomPrefabNameValid()
    {
        // Überprüfen, ob der benutzerdefinierte Name leer ist oder bereits existiert
        return !string.IsNullOrEmpty(_customPrefabName) && !Pack.Entries.ContainsKey(_customPrefabName);
    }

    // Methode zum Umschalten der Sichtbarkeit eines Prefabs
    private bool IsPrefabVisible(string prefabKey)
    {
        return prefabVisibility.ContainsKey(prefabKey) && prefabVisibility[prefabKey];
    }

    private void TogglePrefabVisibility(string prefabKey)
    {
        if (prefabVisibility.ContainsKey(prefabKey))
        {
            prefabVisibility[prefabKey] = !prefabVisibility[prefabKey];
        }
        else
        {
            prefabVisibility[prefabKey] = true; // Wenn der Key noch nicht existiert, setze ihn auf "sichtbar"
        }
    }

    // Methode zum Hinzufügen eines neuen Prefabs
    private void AddNewPrefab()
    {
        string prefabKeyToAdd = _useCustomPrefabName ? _customPrefabName : _selectedPrefabKey;

        if (!string.IsNullOrEmpty(prefabKeyToAdd) && !Pack.Entries.ContainsKey(prefabKeyToAdd))
        {
            Pack.Entries[prefabKeyToAdd] = new List<Variation>();
            if (_useCustomPrefabName)
            {
                Pack.Entries[prefabKeyToAdd].Add(new Variation());
            }
            else
            {
                foreach (Variation variation in VanillaPack.Entries[_selectedPrefabKey])
                {
                    Pack.Entries[prefabKeyToAdd].Add(new Variation
                    {
                        Color1 = variation.Color1,
                        Color2 = variation.Color2,
                        Color3 = variation.Color3,
                        Probability = variation.Probability
                    });
                }
            }
            _selectedPrefabKey = string.Empty; // Setzt das Dropdown zurück
            _customPrefabName = string.Empty; // Setzt den benutzerdefinierten Namen zurück
        }
    }

    // Rückgabemethoden für die Bild-URLs
    private string GetThumbnail(string key)
    {
        if (!VanillaPack.Entries.ContainsKey(key))
        {
            return "images/custom.png";
        }
        return $"thumbnails/{key}.png";
    }

    private string GetSelectedPrefabImage()
    {
        if (_useCustomPrefabName)
        {
            return "images/custom.png";
        }
        if (string.IsNullOrEmpty(_selectedPrefabKey))
        {
            return "images/add.png";
        }
        return $"thumbnails/{_selectedPrefabKey}.png";
    }

    private void OnCustomPrefabNameChange(ChangeEventArgs e)
    {
        _useCustomPrefabName = (bool)e.Value;
        if (_useCustomPrefabName)
        {
            _selectedPrefabKey = string.Empty;
        }
    }

    private bool IsAddButtonEnabled()
    {
        // Der Button ist nur aktiviert, wenn entweder ein benutzerdefinierter Name gesetzt ist und gültig
        // oder ein Prefab aus der Liste ausgewählt wurde und nicht bereits existiert
        if (_useCustomPrefabName && IsCustomPrefabNameValid())
            return true;
        if (!_useCustomPrefabName && !string.IsNullOrEmpty(_selectedPrefabKey))
            return true;
        return false;
    }
}
