@using VariationPackCreator.Models
<div class="col">
    <div class="accordion" id="accordion-@Name">
        <div class="accordion-item">
            <h2 class="accordion-header" id="heading-@Name">
                <button class="accordion-button prefab-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapse-@Name" aria-expanded="true" aria-controls="collapse-@Name">
                    <div class="prefab-image-container">
                        <img src="@GetThumbnail(Name)"  alt="@Name" class="prefab-image-large" onerror="this.onerror=null;this.src='images/custom.png';" />
                    </div>
                    <h5 class="prefab-text">@Name</h5>
                </button>
            </h2>
            <div id="collapse-@Name" class="accordion-collapse collapse" aria-labelledby="heading-@Name" data-bs-parent="#accordion-@Name">
                <div class="accordion-body">
                    <button class="btn btn-danger" onclick="@RemovePrefab">Remove Prefab</button>
                    <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
                        @foreach (var variation in Variations)
                        {
                            <VariationComponent OnRemoveVariationClick="@(() => RemoveVariation(variation))" Variation="@variation" VariationChance="@GetVariationChance(variation)" OnVariationProbabilityChange="@OnVariationProbabilityChange"/>
                        }
                        <AddVariationComponent OnAddVariationClick="@AddVariation"/>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public required string Name { get; set; }
    [Parameter] public required List<Variation> Variations { get; set; }
    [Parameter] public EventCallback<string> OnRemovePrefabClick { get; set; }

    public string GetVariationChance(Variation variation)
    {
        if (Variations.Count < 2)
        {
            return string.Empty;
        }

        int sum = 0;
        for (int i = 0; i < Variations.Count; i++)
        {
            sum += Variations[i].Probability;
        }
        double chance = ((double) variation.Probability / (double) sum) * 100;
        return $"{chance:0.##}%";
    }

    private void OnVariationProbabilityChange()
    {
        StateHasChanged();
    }

    private void RemovePrefab()
    {
        OnRemovePrefabClick.InvokeAsync(Name);
    }

    private string GetThumbnail(string name)
    {
        return $"thumbnailsDynamic/{name}.png";
        //return $"thumbnails/{name}.png";
    }

    private void RemoveVariation(Variation variation)
    {
        Variations.Remove(variation);
        StateHasChanged();
    }

    private void AddVariation()
    {
        Variations.Add(new Variation());
        StateHasChanged();
    }
}