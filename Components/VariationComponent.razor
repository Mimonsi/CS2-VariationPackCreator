@using VariationPackCreator.Models
<div class="position-relative p-3 border rounded variation-container">
    <div class="d-flex flex-column align-items-center gap-3">
        <div class="d-flex align-items-center">
            @if (!string.IsNullOrEmpty(VariationChance))
            {
                <p>Chance: @VariationChance</p>
            }
        </div>
        <ColorInputComponent Component="Y" Color="@Variation.Color1" />
        <ColorInputComponent Component="M" Color="@Variation.Color2" />
        <ColorInputComponent Component="G" Color="@Variation.Color3" />

        <div>
            <label for="probability">Probability</label>
            <input type="number" id="probability"
                   @bind-value="ProbabilityInput"
                   @bind-value:event="oninput"
                   min="0" max="255" step="1" class="@ValidationClass" />
            @if (!string.IsNullOrEmpty(ValidationMessage))
            {
                <p class="text-danger">@ValidationMessage</p>
            }
        </div>
        <button @onclick="OnRemoveVariationClick" class="btn btn-danger">
            Remove Variation
        </button>
    </div>
</div>

@code {
    [Parameter] public required Variation Variation { get; set; }
    [Parameter] public required EventCallback OnRemoveVariationClick { get; set; }
    [Parameter] public required string VariationChance { get; set; }
    [Parameter] public required EventCallback OnVariationProbabilityChange { get; set; }

    private string? ValidationMessage { get; set; }
    private string ValidationClass { get; set; } = string.Empty;

    private int ProbabilityInput
    {
        get => Variation.Probability;
        set
        {
            if (value > 255)
            {
                ValidationMessage = "Probability cannot exceed 255. Create second variation instead for a combined value greater than 255.";
                ValidationClass = "is-invalid";
                Variation.Probability = 255;
            }
            else
            {
                ValidationMessage = null;
                ValidationClass = string.Empty;
                Variation.Probability = value;
                OnVariationProbabilityChange.InvokeAsync();
            }
        }
    }
}
